image: $CI_REGISTRY/materials-modeling/$CI_PROJECT_NAME/cicd

variables:
  INSTDIR: "local_installation"

before_script:
  - export PYTHONPATH=$PWD/$INSTDIR:${PYTHONPATH}


#------------------- build stage -------------------

.build:
  stage: build
  artifacts:
    expire_in: 2 days
    paths:
      - local_installation/
  script:
    - pip3 install --target=$INSTDIR .

build:linux:
  extends: .build
  tags:
    - linux

build:macos:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR:${PYTHONPATH}
    - export PATH=/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}
  extends: .build
  tags:
    - macosvm


#------------------- test stage -------------------

.basic_tests:
  stage: test
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  script:
    - xdoctest icet
    - xdoctest mchammer
    - pytest -v -m coverage_hangup tests/
    - coverage run -m pytest --verbose -m 'not coverage_hangup' --junitxml=report.xml tests/
    - coverage report -m --omit=icet/tools/constituent_strain_helper_functions.py
    - coverage html --omit=icet/tools/constituent_strain_helper_functions.py

basic_tests:linux:
  extends: .basic_tests
  needs:
    - build:linux
  tags:
    - linux
  artifacts:
    expire_in: 2 days
    paths:
      - htmlcov/
    reports:
      junit: report.xml

basic_tests:macos:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR:${PYTHONPATH}
    - export PATH=/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}
  extends: .basic_tests
  needs:
    - build:macos
  tags:
    - macosvm
  artifacts:
    expire_in: 2 days
    reports:
      junit: report.xml

benchmarks_examples:
  stage: test
  tags:
    - linux
  only:
    - schedules
  needs:
    - build:linux
  script:
    - for f in benchmark/*.py; do python3 -u "$f"; done
    - pwd=`pwd`
    - |
      for dir in $(find examples -name '*.py' | grep -v constituent_strain | xargs dirname | sort -uk1) ; do
        cd $pwd
        cd $dir
        for file in `ls *.py | sort -gk1 | grep -v __ | grep -v parallel_monte_carlo` ; do
          echo "Running $file -- `date`"
          python3 $file
          echo "Finished running $file -- `date`"
        done
        echo
      done

style_check:
  stage: test
  tags:
    - linux
  needs:
    - build:linux
  script:
    - flake8 icet/ mchammer/ tests/ benchmark/ doc/ examples/

test_documentation:
  stage: test
  tags:
    - linux
  needs:
    - build:linux
  except:
   - master
  artifacts:
    expire_in: 1 days
    paths:
      - public
  script:
    - mkdir public
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/apidoc/
    - sphinx-build -b doctest -W doc/userguide/ public/
    - sphinx-build -W doc/userguide/ public/

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  tags:
    - linux
  artifacts:
    paths: [gl-code-quality-report.json]

#------------------- deploy stage -------------------

pages:
  stage: deploy
  tags:
    - linux
  artifacts:
    expire_in: 14 days
    paths:
      - public
  only:
    - master
    - tags
  script:
    - mkdir -p public/dev
    - mv htmlcov/ public/

    # --------------------------
    # DEVELOPMENT VERSION
    - git checkout master
    - tag=$(git describe | tail -1)
    - echo "tag= $tag"
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/dev/apidoc/
    - sed -i "s/version = ''/version = '$tag'/" doc/userguide/conf.py
    - grep version doc/userguide/conf.py
    - sphinx-build -W doc/userguide/ public/dev/
    - cd examples
    - find tutorial/ -print | zip ../public/dev/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/dev/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/dev/tests.zip tests/structure_databases/*.db -@
    - git checkout -- doc/userguide/conf.py
    # --------------------------
    # STABLE VERSION
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    # We need to re-install because C++ objects are imported when building the documentation 
    - rm -r $INSTDIR
    - mkdir $INSTDIR
    - pip3 install --target=$INSTDIR .
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/apidoc/
    - sed -i "s/version = ''/version = '$tag'/" doc/userguide/conf.py
    - ORIG_PYTHONPATH=$PYTHONPATH
    - export PYTHONPATH=$PWD:$PYTHONPATH
    - sphinx-build -W doc/userguide/ public/
    - cd examples
    - find tutorial/ -print | zip ../public/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/tests.zip tests/structure_databases/*.db -@
    - export PYTHONPATH=$ORIG_PYTHONPATH
    # --------------------------
    - ls -l public/

pypi:
  stage: deploy
  tags:
    - linux
  only:
    - tags
  when: manual
  environment:
      name: pypi-upload
  script:
    # check out the latest tag (redundant if job is limited to tags; still a sensible precaution)
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    # create source distribution and push to PyPI
    - python3 setup.py sdist
    - ls -l dist/
    - python3 -m twine upload dist/*
